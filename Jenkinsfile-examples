CODE_CHANGES = getGitChanges()
pipeline {
    agent any
    environment {
        NEW_VERSION = '1.3.0'
        SERVER_CREDENTIALS = credentials('id of the credentials') //first type of use credential variables
    }
    tools {
        maven 'Maven'
    }
    parameters {
        string(name: 'VERSION', defaultValue: '', description: 'version to deploy on prod')
        choice(name: 'VERSION', choices: ['1.1.0', '1.2.0', '1.3.0'], description: 'version to deploy on prod')
        booleanParam(name: 'executeTest', defaultValue: true, description: '')
    }
    stages {
        stage("build") {
            when {
                expression {
                    BRANCH_NAME == 'dev' && CODE_CHANGES == true
                }
            }
            steps {
                echo "building the application"
                echo "building version ${NEW_VERSION}"
            }
        }
        stage("test") {
            when {
                expression {
                    BRANCH_NAME == 'dev' ||  BRANCH_NAME == 'main'
                }
            }
            steps {
                echo "testing the application"
            }
        }
        stage("deploy") {
            when {
                expression {
                    parameters.executeTest == true
                }
            }
            input {
                message "Select the environment to deploy to"
                ok "Env selected"
                parameters {
                    choice(name: 'ONE', choices: ['dev', 'staging', 'prod'], description: '')
                    choice(name: 'TWO', choices: ['dev', 'staging', 'prod'], description: '')
                }
                }
            }
            steps {
                echo "deploying the application"
                withCredentials([
                    usernamePassword(credentials: 'id of the credentials', usernameVariable: USER, passwordVariable: PWD) //second type of use credential variables
                ])
                echo "deploying with ${SERVER_CREDENTIALS}"
            }
        }
    }   
}
